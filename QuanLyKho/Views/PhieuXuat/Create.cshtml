@model QuanLyKho.ViewModels.PhieuXuatViewModels.PhieuXuatCreateViewModel

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-10">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h2 class="mb-0">Tạo phiếu xuất mới</h2>
                </div>
                <div class="card-body">
                    <form asp-action="Create" asp-controller="PhieuXuat" class="needs-validation" novalidate>
                        @Html.HiddenFor(model => model.MaNguoiDung)

                        <div class="mb-3">
                            <label asp-for="NguoiYeuCau" class="form-label">Nhân viên yêu cầu</label>
                            <select class="form-select" asp-for="NguoiYeuCau" asp-items="ViewBag.NhanVienList" required>
                                <option value="">Chọn nhân viên</option>
                            </select>
                            <span asp-validation-for="NguoiYeuCau" class="text-danger"></span>
                        </div>

                        <h3 class="text-center mt-4 mb-3">Thông tin thiết bị</h3>
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>Tên thiết bị</th>
                                    <th class="text-center">SL còn</th>
                                    <th class="text-end">Giá bán</th>
                                    <th class="text-center">SL xuất</th>
                                </tr>
                            </thead>
                            <tbody>
                                @for (int i = 0; i < Model.ThongTinThietBis.Count; i++)
                                {
                                    <tr>
                                        <td class="align-middle">
                                            @Html.HiddenFor(model => model.ThongTinThietBis[i].MaNhaCungCap)
                                            @Html.HiddenFor(model => model.ThongTinThietBis[i].MaThietBi, new { @name = $"ThongTinThietBis[{i}].MaThietBi" })
                                            @Html.DisplayFor(model => model.ThongTinThietBis[i].MaThietBi)
                                        </td>
                                        <td class="align-middle">
                                            @Html.DisplayFor(model => model.ThongTinThietBis[i].TenThietBi)
                                        </td>
                                        <td class="align-middle text-center">
                                            @Html.DisplayFor(model => model.ThongTinThietBis[i].SoLuongCon)
                                        </td>
                                        <td class="align-middle text-end">
                                            @Html.HiddenFor(model => model.ThongTinThietBis[i].GiaBan)
                                            @(String.Format("{0:n0} VNĐ", Model.ThongTinThietBis[i].GiaBan))
                                        </td>
                                        <td class="align-middle input-group">
                                            <button class="btn btn-outline-secondary" type="button" onclick="decrementValue(@i)">-</button>
                                            @Html.EditorFor(model => model.ThongTinThietBis[i].SoLuongXuat, new { htmlAttributes = new { @class = "form-control soLuongXuat", @style = "width: 50px; text-align: center;", @min = "0", @name = $"ThongTinThietBis[{i}].SoLuongXuat" } })
                                            <button class="btn btn-outline-secondary" type="button" onclick="incrementValue(@i)">+</button>
                                            @Html.ValidationMessageFor(model => model.ThongTinThietBis[i].SoLuongXuat, "", new { @class = "text-danger" })
                                        </td>
                                    </tr>
                                }
                                <tr>
                                    <td colspan="3" class="text-start fw-bold">Tổng cộng:</td>
                                    @Html.HiddenFor(model => model.TongTien, new { id = "tongTienHidden" })
                                    <td id="tongTien" class="text-end fw-bold">@(String.Format("{0:n0} VNĐ", Model.TongTien))</td>
                                    <td colspan="2"></td>
                                </tr>
                            </tbody>
                        </table>

                        <div class="mb-3">
                            <label asp-for="GhiChu" class="form-label">Ghi chú:</label>
                            <textarea asp-for="GhiChu" class="form-control" rows="3"></textarea>
                        </div>

                        <div class="d-flex justify-content-between mt-4">
                            <a asp-action="Index" class="btn btn-secondary">Trở về</a>
                            <button id="submitButton" type="submit" class="btn btn-primary">Tạo phiếu xuất</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    const soLuongXuatInputs = document.querySelectorAll('.soLuongXuat');
    const submitButton = document.getElementById('submitButton');

    calculateTotal();
    validateSubmitButton();

    soLuongXuatInputs.forEach(input => {
        input.addEventListener('input', () => {
            calculateTotal();
            validateSubmitButton();
        });
    });

    function calculateTotal() {
        let total = 0;
        soLuongXuatInputs.forEach(input => {
            const soLuongXuat = parseInt(input.value) || 0;
            const giaBanText = input.closest('tr').querySelector('td:nth-child(4)').textContent;
            const giaBan = parseFloat(giaBanText.replace(/\D/g, '')) || 0;
            total += soLuongXuat * giaBan;
        });
        document.getElementById('tongTien').textContent = total.toLocaleString('vi-VN') + ' VNĐ';
        document.getElementById('tongTienHidden').value = total; // Update the hidden field
    }

    function validateSubmitButton() {
        let isValid = true;
        soLuongXuatInputs.forEach(input => {
            const soLuongXuat = parseInt(input.value) || 0;
            const soLuongCon = parseInt(input.closest('tr').querySelector('td:nth-child(3)').textContent) || 0;
            const row = input.closest('tr');

            if (soLuongXuat > soLuongCon) {
                isValid = false;
                row.style.backgroundColor = '#f8d7da'; // Error background color
            } else {
                row.style.backgroundColor = ''; // Reset background color
            }
        });
        submitButton.disabled = !isValid;
    }

    function incrementValue(index) {
        const input = soLuongXuatInputs[index];
        input.value = parseInt(input.value) + 1 || 1; // Increment or set to 1
        calculateTotal(); // Recalculate the total
        validateSubmitButton(); // Revalidate the submit button
    }

    function decrementValue(index) {
        const input = soLuongXuatInputs[index];
        const currentValue = parseInt(input.value) || 0;
        input.value = currentValue > 0 ? currentValue - 1 : 0; // Decrement or keep at 0
        calculateTotal(); // Recalculate the total
        validateSubmitButton(); // Revalidate the submit button
    }
</script>
